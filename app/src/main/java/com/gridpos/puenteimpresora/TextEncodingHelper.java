package com.gridpos.puenteimpresora;

import android.util.Log;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

/**
 * üåç Helper para manejar codificaci√≥n de texto en impresoras t√©rmicas
 * Soluciona problemas con caracteres especiales (√±, tildes, etc.)
 */
public class TextEncodingHelper {
    private static final String TAG = "TextEncodingHelper";
    
    // Comandos ESC/POS para configurar p√°gina de c√≥digos
    public static final byte[] ESC_INIT = {0x1B, 0x40}; // Inicializar
    public static final byte[] SET_CODEPAGE_CP437 = {0x1B, 0x74, 0x00}; // CP437 (USA)
    public static final byte[] SET_CODEPAGE_CP850 = {0x1B, 0x74, 0x02}; // CP850 (Latin-1)
    public static final byte[] SET_CODEPAGE_CP858 = {0x1B, 0x74, 0x13}; // CP858 (Latin-1 con ‚Ç¨)
    public static final byte[] SET_INTERNATIONAL_CHARSET = {0x1B, 0x52, 0x0A}; // Espa√±a
    
    /**
     * üéØ Convertir texto con caracteres especiales para impresoras t√©rmicas
     */
    public static byte[] encodeTextForThermalPrinter(String text) {
        if (text == null || text.isEmpty()) {
            return new byte[0];
        }
        
        try {
            Log.d(TAG, "üåç Codificando texto: " + text);
            
            // Preparar comandos de inicializaci√≥n
            java.util.List<Byte> commandList = new java.util.ArrayList<>();
            
            // Inicializar impresora
            addBytes(commandList, ESC_INIT);
            
            // Configurar p√°gina de c√≥digos CP850 (mejor para espa√±ol)
            addBytes(commandList, SET_CODEPAGE_CP850);
            
            // Configurar charset internacional para Espa√±a
            addBytes(commandList, SET_INTERNATIONAL_CHARSET);
            
            // Convertir texto usando diferentes m√©todos seg√∫n contenido
            String processedText = preprocessSpanishText(text);
            
            // Intentar diferentes codificaciones
            byte[] textBytes = encodeWithBestMethod(processedText);
            
            // Agregar el texto
            for (byte b : textBytes) {
                commandList.add(b);
            }
            
            // Convertir lista a array
            byte[] result = new byte[commandList.size()];
            for (int i = 0; i < commandList.size(); i++) {
                result[i] = commandList.get(i);
            }
            
            Log.d(TAG, "‚úÖ Texto codificado: " + result.length + " bytes");
            return result;
            
        } catch (Exception e) {
            Log.e(TAG, "‚ùå Error codificando texto", e);
            // Fallback: texto sin caracteres especiales
            return text.replaceAll("[√±√°√©√≠√≥√∫√º¬ø¬°√ë]", "?").getBytes(StandardCharsets.US_ASCII);
        }
    }
    
    /**
     * üîÑ Preprocesar texto espa√±ol para mejor compatibilidad
     */
    private static String preprocessSpanishText(String text) {
        // Normalizar algunos caracteres problem√°ticos
        String processed = text;
        
        // Log caracteres especiales detectados
        if (processed.matches(".*[√±√ë√°√©√≠√≥√∫√º√Å√â√ç√ì√ö√ú¬ø¬°].*")) {
            Log.d(TAG, "üåç Caracteres especiales detectados en: " + text);
        }
        
        return processed;
    }
    
    /**
     * üìù Probar diferentes m√©todos de codificaci√≥n
     */
    private static byte[] encodeWithBestMethod(String text) {
        // M√©todo 1: CP850 (recomendado para espa√±ol)
        try {
            if (Charset.isSupported("CP850")) {
                byte[] cp850Bytes = text.getBytes("CP850");
                Log.d(TAG, "‚úÖ Usando codificaci√≥n CP850");
                return cp850Bytes;
            }
        } catch (Exception e) {
            Log.w(TAG, "‚ö†Ô∏è CP850 no disponible");
        }
        
        // M√©todo 2: ISO-8859-1 (Latin-1)
        try {
            if (Charset.isSupported("ISO-8859-1")) {
                byte[] iso88591Bytes = text.getBytes("ISO-8859-1");
                Log.d(TAG, "‚úÖ Usando codificaci√≥n ISO-8859-1");
                return iso88591Bytes;
            }
        } catch (Exception e) {
            Log.w(TAG, "‚ö†Ô∏è ISO-8859-1 no disponible");
        }
        
        // M√©todo 3: Windows-1252
        try {
            if (Charset.isSupported("windows-1252")) {
                byte[] windows1252Bytes = text.getBytes("windows-1252");
                Log.d(TAG, "‚úÖ Usando codificaci√≥n Windows-1252");
                return windows1252Bytes;
            }
        } catch (Exception e) {
            Log.w(TAG, "‚ö†Ô∏è Windows-1252 no disponible");
        }
        
        // Fallback: Reemplazar caracteres especiales manualmente
        Log.w(TAG, "‚ö†Ô∏è Usando fallback manual para caracteres especiales");
        return replaceSpanishCharsManually(text).getBytes(StandardCharsets.US_ASCII);
    }
    
    /**
     * üîÑ Reemplazo manual de caracteres especiales
     */
    private static String replaceSpanishCharsManually(String text) {
        return text
            .replace("√±", "\u00F1") // √± en Latin-1
            .replace("√ë", "\u00D1") // √ë en Latin-1
            .replace("√°", "\u00E1") // √° en Latin-1
            .replace("√©", "\u00E9") // √© en Latin-1
            .replace("√≠", "\u00ED") // √≠ en Latin-1
            .replace("√≥", "\u00F3") // √≥ en Latin-1
            .replace("√∫", "\u00FA") // √∫ en Latin-1
            .replace("√º", "\u00FC") // √º en Latin-1
            .replace("√Å", "\u00C1") // √Å en Latin-1
            .replace("√â", "\u00C9") // √â en Latin-1
            .replace("√ç", "\u00CD") // √ç en Latin-1
            .replace("√ì", "\u00D3") // √ì en Latin-1
            .replace("√ö", "\u00DA") // √ö en Latin-1
            .replace("√ú", "\u00DC") // √ú en Latin-1
            .replace("¬ø", "\u00BF") // ¬ø en Latin-1
            .replace("¬°", "\u00A1"); // ¬° en Latin-1
    }
    
    /**
     * üõ†Ô∏è Helper para agregar bytes a lista
     */
    private static void addBytes(java.util.List<Byte> list, byte[] bytes) {
        for (byte b : bytes) {
            list.add(b);
        }
    }
    
    /**
     * üß™ M√©todo de prueba para diferentes codificaciones
     */
    public static void testEncodings(String text) {
        Log.d(TAG, "üß™ Probando codificaciones para: " + text);
        
        try {
            // UTF-8
            byte[] utf8 = text.getBytes(StandardCharsets.UTF_8);
            Log.d(TAG, "UTF-8: " + java.util.Arrays.toString(utf8));
            
            // ISO-8859-1
            if (Charset.isSupported("ISO-8859-1")) {
                byte[] iso = text.getBytes("ISO-8859-1");
                Log.d(TAG, "ISO-8859-1: " + java.util.Arrays.toString(iso));
            }
            
            // CP850
            if (Charset.isSupported("CP850")) {
                byte[] cp850 = text.getBytes("CP850");
                Log.d(TAG, "CP850: " + java.util.Arrays.toString(cp850));
            }
            
        } catch (Exception e) {
            Log.e(TAG, "Error en test de codificaciones", e);
        }
    }
}
